import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

interface ClassificationResult {
  label: string;
  score: number;
}

interface ExportData {
  fileName: string;
  timestamp: Date;
  results: ClassificationResult[];
  imageUrl?: string;
}

export const exportToPDF = async (data: ExportData) => {
  try {
    const pdf = new jsPDF();
    
    // Add title
    pdf.setFontSize(20);
    pdf.setTextColor(124, 58, 237); // Primary color
    pdf.text('Classification Results', 20, 30);
    
    // Add metadata
    pdf.setFontSize(12);
    pdf.setTextColor(0, 0, 0);
    pdf.text(`File: ${data.fileName}`, 20, 50);
    pdf.text(`Date: ${data.timestamp.toLocaleDateString()}`, 20, 65);
    pdf.text(`Time: ${data.timestamp.toLocaleTimeString()}`, 20, 80);
    
    // Add results
    pdf.setFontSize(16);
    pdf.text('Classification Results:', 20, 105);
    
    let yPosition = 125;
    data.results.slice(0, 10).forEach((result, index) => {
      pdf.setFontSize(12);
      const percentage = (result.score * 100).toFixed(1);
      pdf.text(`${index + 1}. ${result.label.replace(/_/g, ' ')}: ${percentage}%`, 30, yPosition);
      yPosition += 15;
    });
    
    // Add footer
    pdf.setFontSize(10);
    pdf.setTextColor(128, 128, 128);
    pdf.text('Generated by AI Classification Platform', 20, 280);
    
    // Save the PDF
    pdf.save(`classification-${data.fileName}-${Date.now()}.pdf`);
    
    return true;
  } catch (error) {
    console.error('Error exporting PDF:', error);
    return false;
  }
};

export const shareResults = async (data: ExportData) => {
  const shareData = {
    title: 'AI Classification Results',
    text: `Check out my image classification results for "${data.fileName}": ${data.results.slice(0, 3).map(r => `${r.label.replace(/_/g, ' ')} (${(r.score * 100).toFixed(1)}%)`).join(', ')}`,
    url: window.location.href
  };

  if (navigator.share && navigator.canShare(shareData)) {
    try {
      await navigator.share(shareData);
      return true;
    } catch (error) {
      console.log('Error sharing:', error);
    }
  }

  // Fallback to clipboard
  try {
    await navigator.clipboard.writeText(shareData.text);
    return true;
  } catch (error) {
    console.error('Error copying to clipboard:', error);
    return false;
  }
};

export const captureElementAsPNG = async (elementId: string, filename: string) => {
  try {
    const element = document.getElementById(elementId);
    if (!element) return false;

    const canvas = await html2canvas(element, {
      backgroundColor: '#1a1a1a',
      scale: 2,
      logging: false,
    });

    const link = document.createElement('a');
    link.download = `${filename}-${Date.now()}.png`;
    link.href = canvas.toDataURL();
    link.click();

    return true;
  } catch (error) {
    console.error('Error capturing element:', error);
    return false;
  }
};